Первоначальная настройка GIT Bash. Настраиваем среду для работы под 
себя. Это необходимо сделать единоразово. 
1. Первое, что следует сделать после установки GIT Bash - указать имя и адрес эл. почты. Это важно, потому что каждый коммит в GIT содержит эту информацию, и она включена в коммиты, передаваемые вами, и не может быть далее изменена: 
$ git config --global user.name "имя пользователя"
$ git config -- global user.email почта

2. Генерация и добавление SSH ключа для подключения к удаленному репозиторию GitHub:
$ ssh-keygen -t rsa -C почта 
Вводим ключ.
Это необходимо сделать, чтобы:
1) трафик быыл защищен;
2) мы могли клонировать репозиторий по SSH ключу.

3. После находим этот ключ в папках и открываем с помощью блокнота, копируем ключ. (файл может быть скрыт .ssh)

4. Заходим на Github в настройки -> SSH and GPG keys -> выбираем New SSH key -> вводим в Title New_key -> в Key вводим скопированный ключ из блокнота -> сохраняем.

5. Создали репозиторий на Github.

6. Копирование сущетвующего репозитория.
Для получения копии существующего Git-репозитория необходимо использовать команду git clone. При выполнении git clone c сервера забирается каждая версия каждого файла из истории проектов.
Клонирования репозитория осуществляется командой:
$ git clone <url> -> вставляем code SSh key из Github.
Вводим ключ.

7. Команда $ git add добавляет содержимое рабочего каталога в индекс (staging area) для последующего коммита.
По умолчанию git commit использует лишь этот индекс, так что вы можете использовать git add для сборки слепка вашего следующего коммита.

8. Создание коммита 
Команда git commit берет все данные, добавленные в индексе с помощью git add, и сохраняет их слепок во внутренней базе данных, а затем сдвигает указатель текущей ветки на этот слепок.
Опции -a для добавления всех изменений в индекс без использования git add, что может быть удобным в повседневном использовании и -m для передачи сообщения коммита без запуска полноценного редактора.
$ git commit -a -m "комментарий" 

9. $ git push - файл добавляется на удаленный репозиторий Github
вводим ключ 

Основные команды терминала Git Bash:
1. $ pwd - посмотреть где я
2. $ mkdir имя папки - создать папку
3. $ mkdir имя папки, имя папки, .. - создать несколько папок
4. $ cd имя папки - зайти в папку
5. $ cd без ничего - выйдем в корневую папку
6. $ cd .. - переносит на 1 уровень выше
7. $ ls - просмотр всех файлов и папок
8. $ touch имя_файла.txt имя_файла.json - создать файл с определенным расширением
9. $ nano имя_файла.txt - открывается интерфейс редактирования -> завершить редактирование - ctrl+x -> enter
10. $ vim имя_файла.txt - открывается интерфейс -> для редактирования нажать на I, для выхода из редактора esc + :wq, либо esc + ZZ
11. $ mv имя_файла.txt путь файла, куда хотим переместить - перемещение файла
Если перемещать 2 и более файла, то их названия прописываем через пробел.
Варианты перемещения:
Вариант 1
Относительная адресация - относительно той папки, в которой я нахожусь. Здесь можно использовать ../ для указания родительской папки.
Вариант 2
Абсолютная адресация - начинается с корневой папки. 
12. $ mv oldfilename newfilename 
C помощью команды mv можно переименовать файлы.
13. $ cp имя_файла.txt путь, куда хотим скопировать файл. Если скопировать 2 и более файла, то их названия прописывать через пробел.
14. $ find директория -name имя_файла.txt - найти файл по имени
15. $ grep "" имя_файл.txt - посмотреть содержимое в реальном времени (поиск внутри файла). В "" можно вписать слово которое ищем или регулярное выражение.
16. $ cat имя_файла.txt - показывает содержимое
17. $ head -4 имя_файла.txt - вывести несколько первых строк из текстового файла (4 - это количество строк, в нашем случае мы выведем первые 4 строки)
18. $ tail -4 имя_файла.txt - вывести несколько последних строк из текстового файла (выведутся последние 4 строчки)
19. $ less имя_файла.txt - команда less используется для просмотра длинных текстов и не засоряет терминал
20. $ date - вывести дату и время
21. $ clear - очистить терминал
22. $ git status - проверяем есть ли у нас что-нибудь к добавлению в Git
23. $ git add имя_файла.txt - команда используется для сборки слепка нашего следующего коммита.
24. $ git commit -a -m "комментарий" - сохраняет слепок данных 
Опции:
-a для добавления всех изменений
-m для передачи сообщения коммита без запуска полноценного редактора 
25. $ git push - файл добавляется на удаленный репозиторий Github
